<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Trophy Trout Guide</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Teko:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #F8F7F4;
        }
        h1, h2, h3, .nav-font {
            font-family: 'Teko', sans-serif;
        }
        .bg-primary { background-color: #F8F7F4; }
        .bg-secondary { background-color: #EAE7DC; }
        .bg-accent { color: #A4C8D8; }
        .text-accent { color: #A4C8D8; }
        .text-primary { color: #3D405B; }
        .text-secondary { color: #8D99AE; }
        .border-accent { border-color: #A4C8D8; }
        .btn-primary {
            background-color: #3D405B;
            color: #FFFFFF;
            transition: background-color 0.3s ease;
        }
        .btn-primary:hover {
            background-color: #545A81;
        }
        .accordion-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.5s ease-in-out;
        }
        .accordion-content.open {
            max-height: 1000px;
        }
        .icon-rotate {
            transition: transform 0.3s ease;
        }
        .open .icon-rotate {
            transform: rotate(180deg);
        }
    </style>
</head>
<body class="bg-primary text-primary min-h-screen">
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;
        const App = () => {
          const [locationInput, setLocationInput] = useState('');
          const [dateInput, setDateInput] = useState('');
          const [waterTempInput, setWaterTempInput] = useState('');
          const [windInput, setWindInput] = useState('');
          const [tideInput, setTideInput] = useState('');
          const [moonInput, setMoonInput] = useState('');

          const [apiResponse, setApiResponse] = useState(null);
          const [isLoading, setIsLoading] = useState(false);
          const [error, setError] = useState(null);
          const [openAccordion, setOpenAccordion] = useState(null);
          const [openStaticAccordions, setOpenStaticAccordions] = useState([false, false, false]);

          const toggleAccordion = (index) => {
            setOpenAccordion(openAccordion === index ? null : index);
          };

          const toggleStaticAccordion = (index) => {
            setOpenStaticAccordions(prev => {
              const newOpenState = [...prev];
              newOpenState[index] = !newOpenState[index];
              return newOpenState;
            });
          };

          const generateRecommendations = async () => {
            if (!locationInput || !dateInput || !waterTempInput || !windInput || !tideInput || !moonInput) {
              setError('Please fill in all forecast fields.');
              return;
            }

            setIsLoading(true);
            setError(null);
            setOpenAccordion(null);
            setApiResponse(null);

            const prompt = `Act as an expert Texas fishing guide for speckled trout. You are provided with the following forecast data: Location: ${locationInput}, Date: ${dateInput}, Water Temp: ${waterTempInput}, Wind: ${windInput}, Tide: ${tideInput}, Moon Phase: ${moonInput}. Based on this forecast and trout biology, recommend and rank the top 10 specific, public walk-in wade fishing locations in that area for that day. For each location, provide a one-sentence expert rationale for why it's a good spot under these conditions. In addition, for each location, provide a 'gpsCoordinates' key which is an array of two objects. Each object should have a 'lat', 'lon', and a 'rationale' key (a one-sentence string explaining why that coordinate is good). The final JSON object must contain three keys: "forecast", "locations", and "expertTactics". The "forecast" object should have keys: "waterTemp", "wind", "tide", and "moon". The "locations" array should contain 10 objects, each with a "name", "description", and "gpsCoordinates" key. The "expertTactics" key should be an array of three objects, each with a "title" and a "description" key, providing specific angling tactics based on the forecast. Do not include any other text outside of the JSON object.`;

            let chatHistory = [];
            chatHistory.push({ role: "user", parts: [{ text: prompt }] });
            const payload = { contents: chatHistory };
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            let retries = 0;
            const maxRetries = 5;
            const initialDelay = 1000;

            const executeFetch = async () => {
              try {
                const response = await fetch(apiUrl, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(payload)
                });

                if (!response.ok) {
                  throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                  const jsonString = result.candidates[0].content.parts[0].text.replace(/```json\n|\n```/g, '');
                  const parsedJson = JSON.parse(jsonString);
                  setApiResponse(parsedJson);
                } else {
                  throw new Error('API response format is unexpected.');
                }
              } catch (e) {
                if (retries < maxRetries) {
                  retries++;
                  const delay = initialDelay * Math.pow(2, retries);
                  setTimeout(() => executeFetch(), delay);
                } else {
                  setError('Failed to generate recommendations after several retries. Please try again later.');
                }
              } finally {
                if (retries >= maxRetries || !error) {
                  setIsLoading(false);
                }
              }
            };
            executeFetch();
          };

          const getWindIcon = (windText) => {
            if (!windText || typeof windText !== 'string') return '💨';
            const direction = windText.toLowerCase().split(' ')[0].replace(/[^a-z]/g, '');
            const icons = {
              'n': '⬇️', 'ne': '↙️', 'e': '⬅️', 'se': '↖️',
              's': '⬆️', 'sw': '↗️', 'w': '➡️', 'nw': '↘️'
            };
            return icons[direction] || '💨';
          };
        
          const formatForecastValue = (value) => {
            if (typeof value === 'object' && value !== null) {
              return Object.entries(value)
                .map(([key, val]) => `${key}: ${val}`)
                .join(', ');
            }
            return value;
          };

          return (
            <div className="bg-primary text-primary min-h-screen">
              <main className="container mx-auto px-4 py-8 md:py-12">
                <section id="forecast" className="mb-16 scroll-mt-16">
                  <h2 className="text-4xl md:text-5xl font-semibold text-center mb-2">Manual Forecast Input</h2>
                  <p className="text-center text-secondary mb-8 max-w-2xl mx-auto">
                    Enter today's or a future day's forecast to get tailored fishing recommendations.
                  </p>
        
                  <div className="bg-secondary p-6 rounded-lg shadow-lg grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
                    <input
                      type="text"
                      placeholder="Location (e.g., Baffin Bay)"
                      value={locationInput}
                      onChange={(e) => setLocationInput(e.target.value)}
                      className="p-3 rounded-lg border border-gray-300 focus:ring-accent focus:border-accent w-full"
                    />
                    <input
                      type="date"
                      placeholder="Date"
                      value={dateInput}
                      onChange={(e) => setDateInput(e.target.value)}
                      className="p-3 rounded-lg border border-gray-300 focus:ring-accent focus:border-accent w-full"
                    />
                    <input
                      type="text"
                      placeholder="Water Temp (e.g., 78°F)"
                      value={waterTempInput}
                      onChange={(e) => setWaterTempInput(e.target.value)}
                      className="p-3 rounded-lg border border-gray-300 focus:ring-accent focus:border-accent w-full"
                    />
                    <input
                      type="text"
                      placeholder="Wind (e.g., E 10-15 mph)"
                      value={windInput}
                      onChange={(e) => setWindInput(e.target.value)}
                      className="p-3 rounded-lg border border-gray-300 focus:ring-accent focus:border-accent w-full"
                    />
                    <input
                      type="text"
                      placeholder="Tide (e.g., Incoming, High at 8 AM)"
                      value={tideInput}
                      onChange={(e) => setTideInput(e.target.value)}
                      className="p-3 rounded-lg border border-gray-300 focus:ring-accent focus:focus:border-accent w-full"
                    />
                    <input
                      type="text"
                      placeholder="Moon Phase (e.g., Waxing Crescent)"
                      value={moonInput}
                      onChange={(e) => setMoonInput(e.target.value)}
                      className="p-3 rounded-lg border border-gray-300 focus:ring-accent focus:border-accent w-full"
                    />
                  </div>
        
                  <div className="flex justify-center">
                    <button
                      id="generate-button"
                      className="btn-primary px-6 py-3 rounded-lg shadow-md font-semibold text-xl w-full md:w-auto"
                      onClick={generateRecommendations}
                      disabled={isLoading}
                    >
                      {isLoading ? 'Generating...' : 'Generate Recommendations'}
                    </button>
                  </div>
        
                  {error && <div className="text-center text-red-500 font-bold mt-4">{error}</div>}
        
                  {apiResponse && apiResponse.forecast && (
                    <div className="bg-secondary p-6 rounded-lg shadow-lg grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-center mt-8">
                      <div className="p-4 bg-white rounded-lg shadow-md">
                        <h3 className="text-xl font-semibold text-accent nav-font">Water Temperature</h3>
                        <p className="text-2xl font-bold text-primary">{apiResponse.forecast.waterTemp}</p>
                        <p className="text-sm text-secondary"></p>
                      </div>
                      <div className="p-4 bg-white rounded-lg shadow-md">
                        <h3 className="text-xl font-semibold text-accent nav-font">Wind Forecast</h3>
                        <p className="text-2xl font-bold text-primary flex items-center justify-center gap-2">
                          <span>{apiResponse.forecast.wind}</span>
                          {apiResponse.forecast.wind && <span className="text-3xl">{getWindIcon(apiResponse.forecast.wind)}</span>}
                        </p>
                        <p className="text-sm text-secondary"></p>
                      </div>
                      <div className="p-4 bg-white rounded-lg shadow-md">
                        <h3 className="text-xl font-semibold text-accent nav-font">Tidal Movement</h3>
                        <p className="text-2xl font-bold text-primary">{apiResponse.forecast.tide}</p>
                        <p className="text-sm text-secondary"></p>
                      </div>
                      <div className="p-4 bg-white rounded-lg shadow-md">
                        <h3 className="text-xl font-semibold text-accent nav-font">Moon Phase</h3>
                        <p className="text-2xl font-bold text-primary">{apiResponse.forecast.moon}</p>
                        <p className="text-sm text-secondary"></p>
                      </div>
                    </div>
                  )}
                </section>
        
                <section id="locations" className="mb-16 scroll-mt-16">
                  <h2 className="text-4xl md:text-5xl font-semibold text-center mb-2">Top 10 Trophy Wade Locations</h2>
                  <p className="text-center text-secondary mb-8 max-w-3xl mx-auto">
                    This list is dynamically prioritized based on the forecast you provided. Click on each spot for an expert's rationale.
                  </p>
        
                  <div id="locations-list" className="space-y-4">
                    {apiResponse && apiResponse.locations && apiResponse.locations.map((location, index) => (
                      <div key={index} className="accordion-item bg-white rounded-lg shadow-md">
                        <button
                          className={`accordion-header w-full flex justify-between items-center p-5 text-left text-2xl nav-font font-semibold ${openAccordion === index ? 'open' : ''}`}
                          onClick={() => toggleAccordion(index)}
                        >
                          <span><span className="text-accent mr-2">{index + 1}.</span>{location.name}</span>
                          <span className="icon-rotate">▼</span>
                        </button>
                        <div className={`accordion-content px-5 pb-5 ${openAccordion === index ? 'open' : ''}`}>
                          <p>{location.description}</p>
                          <div className="mt-4 pt-4 border-t border-secondary space-y-4">
                            <h4 className="text-xl font-semibold text-primary">GPS Coordinates & Rationale</h4>
                            {location.gpsCoordinates.map((coords, coordIndex) => (
                              <div key={coordIndex} className="bg-secondary p-4 rounded-lg shadow-inner">
                                <p className="font-bold text-primary text-lg">
                                  Coordinate {coordIndex + 1}:
                                  <span className="ml-2 font-normal text-secondary">{`Lat: ${coords.lat}, Lon: ${coords.lon}`}</span>
                                </p>
                                <p className="text-sm mt-2 text-secondary">{coords.rationale}</p>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </section>
        
                <section id="expert-advice" className="mb-16 scroll-mt-16">
                  <h2 className="text-4xl md:text-5xl font-semibold text-center mb-2">Expert Rationale & Tactics</h2>
                  <p className="text-center text-secondary mb-8 max-w-3xl mx-auto">
                    These tactics are dynamically generated based on the forecast to help you target trophy trout.
                  </p>
        
                  <div className="space-y-4">
                    {apiResponse && apiResponse.expertTactics && apiResponse.expertTactics.map((tactic, index) => (
                      <div key={index} className="accordion-item bg-white rounded-lg shadow-md">
                        <button
                          className={`accordion-header w-full flex justify-between items-center p-5 text-left text-2xl nav-font font-semibold ${openStaticAccordions[index] ? 'open' : ''}`}
                          onClick={() => toggleStaticAccordion(index)}
                        >
                          <span>{tactic.title}</span>
                          <span className="icon-rotate">▼</span>
                        </button>
                        <div className={`accordion-content px-5 pb-5 ${openStaticAccordions[index] ? 'open' : ''}`}>
                          <p>{tactic.description}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </section>
              </main>
        
              <footer className="bg-secondary mt-12 py-6 text-center">
                <p className="text-secondary text-sm">&copy; 2024 Trophy Trout Guide. Data generated by the Gemini API for educational purposes.</p>
              </footer>
            </div>
          );
        };
        
        ReactDOM.createRoot(document.getElementById('root')).render(<App />);
    </script>
</body>
</html>
